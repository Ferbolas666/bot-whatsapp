const { conectarBanco } = require("./database");
const { Client, MessageMedia } = require("whatsapp-web.js");
const qrcode = require("qrcode");
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const sharp = require("sharp");
const fs = require("fs");
const path = require("path");
const oneLinerJoke = require("one-liner-joke");
const app = express();
const server = http.createServer(app);
const io = new Server(server);
const pastaImagens = "C:\\ImagensCardapio"; // Altere conforme necess√°rio!
const { pegarPiadaAleatoria } = require("./index");

console.log("üîé Testando importa√ß√£o do database.js...");
console.log(typeof conectarBanco);

app.use(express.static("public"));

let client;
const estadoUsuarios = {}; // Armazena o estado de cada usu√°rio

io.on("connection", (socket) => {
    console.log("üñ•Ô∏è Cliente conectado ao socket");

    socket.on("solicitar_qr", () => {
        if (!client) {
            client = new Client();

            client.on("qr", (qr) => {
                console.log("üì≤ Escaneie este QR Code para conectar!");
                qrcode.toDataURL(qr, (err, url) => {
                    io.emit("qr", url);
                });
            });

            client.on("ready", () => {
                console.log("‚úÖ Bot conectado!");
                io.emit("status", "‚úÖ Bot conectado!");
            });

            client.on("message", async (msg) => {
                const texto = msg.body.toLowerCase().trim();
                const numeroUsuario = msg.from;

                // Responde a sauda√ß√µes automaticamente
                const saudacoes = ["oi", "ol√°", "bom dia", "boa tarde", "boa noite"];
                if (saudacoes.includes(texto)) {
                    msg.reply("ü§ñ Ol√°! Eu sou o *Botlomeu*! Como posso te ajudar?");
                    return;
                }

                if (texto === "1") {
                    console.log("üì∏ Enviando imagens do card√°pio...");
                    const imagens = ["cardapio1.png", "cardapio2.png", "cardapio3.png", "cardapio4.png"];
                    imagens.forEach((nomeArquivo, index) => {
                        const caminhoCompleto = path.resolve(pastaImagens, nomeArquivo);
                        if (fs.existsSync(caminhoCompleto)) {
                            const imagemBase64 = fs.readFileSync(caminhoCompleto).toString("base64");
                            const media = new MessageMedia("image/png", imagemBase64);
                            client.sendMessage(numeroUsuario, media, { caption: `üì∏ Imagem ${index + 1} do card√°pio` });
                        } else {
                            console.log(`‚ö†Ô∏è Imagem n√£o encontrada: ${caminhoCompleto}`);
                        }
                    });
                    return;
                }

                if (texto === "2") {
                    msg.reply("üëâ Para fazer seu pedido, clique aqui: https://jaentrego.app.br/");
                    return;
                }

                if (estadoUsuarios[numeroUsuario] === "aguardando_produto") {
                    conectarBanco((err, db) => {
                        if (err) {
                            msg.reply("‚ùå Erro ao conectar ao banco de dados!");
                            return;
                        }
                
                        db.query(
                            "SELECT DESCRICAO, PRECO_CUSTO FROM PRODUTOS WHERE LOWER(DESCRICAO) LIKE ?",
                            [`%${texto}%`],
                            (err, result) => {
                                if (err || result.length === 0) {
                                    msg.reply("‚ùå Produto n√£o encontrado.");
                                } else {
                                    let resposta = "üîç *Produtos encontrados:*\n";
                                    result.forEach((item) => {
                                        resposta += `üìå ${item.DESCRICAO} - üí≤ ${item.PRECO_CUSTO.toFixed(2)}\n`;
                                    });
                                    msg.reply(resposta);
                                }
                                delete estadoUsuarios[numeroUsuario]; // Remove o estado depois da resposta
                            }
                        );
                    });
                    return;
                }
                
                if (estadoUsuarios[numeroUsuario] === "aguardando_cpf_pedido") {
                    delete estadoUsuarios[numeroUsuario];
                    const cpf = texto.replace(/\D/g, ""); // Remove caracteres n√£o num√©ricos
                
                    if (cpf.length !== 11) {
                        msg.reply("‚ùå CPF inv√°lido! Envie apenas os 11 n√∫meros do CPF.");
                        return;
                    }
                
                    conectarBanco((err, db) => {
                        if (err) {
                            msg.reply("‚ùå Erro ao conectar ao banco de dados!");
                            return;
                        }
                
                        db.query("SELECT COD_CLIENTE, NOME FROM CLIENTES WHERE CNPJ_CGC = ?", [cpf], (err, result) => {
                            if (err || result.length === 0) {
                                msg.reply("‚ùå Cliente n√£o encontrado.");
                                return;
                            }
                
                            const codCliente = result[0].COD_CLIENTE;
                            const nomeCliente = result[0].NOME;
                
                            db.query("SELECT STATUS FROM VENDAS_FICHA WHERE COD_CLIENTE = ?", [codCliente], (err, vendas) => {
                                if (err || vendas.length === 0) {
                                    msg.reply(`‚ùå Nenhuma venda encontrada para ${nomeCliente}.`);
                                } else {
                                    const statusVenda = vendas[0].STATUS;
                                    msg.reply(`üë§ Cliente: ${nomeCliente}\nüì¶ Status do pedido: ${statusVenda}`);
                                }
                            });
                        });
                    });
                    return;
                }                

                if (texto.includes("menu")) {
                    msg.reply("üìã *Op√ß√µes do bot:*\n" +
                        "1Ô∏è‚É£ Card√°pio como imagens\n" +
                        "2Ô∏è‚É£ Fazer pedido\n" +
                        "3Ô∏è‚É£ Ofertas e Promo√ß√£o do Dia\n" +
                        "4Ô∏è‚É£ Verificar se o Pedido j√° saiu para entrega.\n" +
                        "5Ô∏è‚É£ Ouvir uma Piada.\n" +
                        "6Ô∏è‚É£ Verificar pre√ßo de algum produto.\n" +
                        "7Ô∏è‚É£ Transferir para um atendente\n\n" +
                        "Digite o n√∫mero da op√ß√£o desejada.");
                    return;
                }

                if (texto === "3") {
                    conectarBanco((err, db) => {
                        if (err) {
                            msg.reply("‚ùå Erro ao conectar ao banco de dados!");
                            return;
                        }
                
                        db.query(
                            "SELECT COD_PRODUTO, VALOR_PROMOCAO, DATAINICIAL, DATAFINAL FROM PRODUTOS_PROMOCAO WHERE COD_PROMOCAO = 1",
                            (err, resultadoPromocoes) => {
                                if (err || resultadoPromocoes.length === 0) {
                                    msg.reply("üì¢ No momento, n√£o h√° promo√ß√µes ativas.");
                                    return;
                                }
                
                                let resposta = "üî• *Promo√ß√µes Ativas:*\n";
                                let consultasPendentes = resultadoPromocoes.length;
                
                                resultadoPromocoes.forEach((promo) => {
                                    const { COD_PRODUTO, VALOR_PROMOCAO, DATAINICIAL, DATAFINAL } = promo;
                
                                    db.query(
                                        "SELECT DESCRICAO, PRECO_CUSTO FROM PRODUTOS WHERE COD_PRODUTO = ?",
                                        [COD_PRODUTO],
                                        (err, resultadoProduto) => {
                                            if (!err && resultadoProduto.length > 0) {
                                                const nomeProduto = resultadoProduto[0].DESCRICAO;
                                                const precoOriginal = resultadoProduto[0].PRECO_CUSTO.toFixed(2);
                                                const valorPromo = VALOR_PROMOCAO.toFixed(2);
                                                const dataInicio = new Date(DATAINICIAL).toLocaleDateString("pt-BR");
                                                const dataFim = new Date(DATAFINAL).toLocaleDateString("pt-BR");
                
                                                resposta += `üçî *${nomeProduto}*\nüí≤ De: ~R$${precoOriginal}~ Por: *R$${valorPromo}*\nüìÖ Promo√ß√£o v√°lida de ${dataInicio} at√© ${dataFim}\n\n`;
                                            }
                
                                            consultasPendentes--;
                                            if (consultasPendentes === 0) msg.reply(resposta);
                                        }
                                    );
                                });
                            }
                        );
                    });
                
                } else if (texto === "4") {
                    estadoUsuarios[numeroUsuario] = "aguardando_cpf_pedido";
                    msg.reply("üì¶ Por favor, envie o CPF do cliente para verificar o status do pedido.");
                } else if (texto === "5") {
                    msg.reply(pegarPiadaAleatoria());
                } else if (texto === "6") {
                    estadoUsuarios[numeroUsuario] = "aguardando_produto";
                    msg.reply("üîç Por favor, envie o nome do produto para verificar o pre√ßo.");
                } else if (texto === "7") {
                    const nomeCliente = msg._data.notifyName || "Cliente";
                    const numeroCliente = msg.from.replace(/\D/g, ""); //Remove caracteres n√£o num√©ricos

                    msg.reply("üìû Logo um de nossos atendentes ir√° entrar em contato. Aguarde...");

                    //Criando um vCard
                    const vCard = `BEGIN:VCARD\nVERSION:3.0\nFN:${nomeCliente}\nTEL;TYPE=cell:+${numeroCliente}\nEND:VCARD`;

                    const contato = new MessageMedia("text/vcard", Buffer.from(vCard).toString("base64"), "contato.vcf");

                    client.sendMessage("5518988033870@c.us", contato, {
                        caption: `üì¢ O cliente *${nomeCliente}* (${numeroCliente}) precisa de atendimento!`,
                    });
                }
            });
            client.initialize();
        }
    });
});

server.listen(3000, '0.0.0.0', () => {
    console.log("üåç Servidor rodando em http://0.0.0.0:3000");
});

